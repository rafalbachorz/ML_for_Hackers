library(ggplot2)    # We'll use ggplot2 for all of our visualizations library(plyr)       # For data manipulation library(scales)     # We'll need to fix date formats in plots
setwd("E:\VisualStudioRepos\ML_for_Hackers\01-Introduction")
setwd("E:/VisualStudioRepos/ML_for_Hackers/01-Introduction")
ufo <- read.delim(file.path("data", "ufo", "ufo_awesome.tsv"),                   sep = "\t",                   stringsAsFactors = FALSE,                   header = FALSE,                    na.strings = "")
summary(ufo)
?summary
head(ufo)
names(ufo) <- c("DateOccurred", "DateReported",                 "Location", "ShortDescription",                 "Duration", "LongDescription")
head(ufo)
ufo$DateOccurred
ufo$DateOccurred <- as.Date(ufo$DateOccurred, format = "%Y%m%d")
library(ggplot2)    # We'll use ggplot2 for all of our visualizations library(plyr)       # For data manipulation library(scales)     # We'll need to fix date formats in plots # This is a tab-delimited file, so we use 'read.delim' and set the separator as a tab character. # We also have to alter two defaults; first, we want the strings to not be converted to # factor types; and, this data has does not have header labels in the first row, so # we want to keep the first row as data. #RB - set up directory to load the data setwd("E:/VisualStudioRepos/ML_for_Hackers/01-Introduction") ufo <- read.delim(file.path("data", "ufo", "ufo_awesome.tsv"),                   sep = "\t",                   stringsAsFactors = FALSE,                   header = FALSE,                    na.strings = "") # This is a large text file (75MB), so this may take a moment # Inspect the data frame summary(ufo) head(ufo) # From the data's description file, we will set the column names accordingly using  # the 'names' function names(ufo) <- c("DateOccurred", "DateReported",                 "Location", "ShortDescription",                 "Duration", "LongDescription")
ufo$DateOccurred <- as.Date(ufo$DateOccurred, format = "%Y%m%d")
ufo$DateReported <- as.Date(ufo$DateReported, format = "%Y%m%d")
head(ufo)
ufo[1]
ufo[,1]
ufo[1,1]
library(ggplot2)    # We'll use ggplot2 for all of our visualizations library(plyr)       # For data manipulation library(scales)     # We'll need to fix date formats in plots # This is a tab-delimited file, so we use 'read.delim' and set the separator as a tab character. # We also have to alter two defaults; first, we want the strings to not be converted to # factor types; and, this data has does not have header labels in the first row, so # we want to keep the first row as data. #RB - set up directory to load the data setwd("E:/VisualStudioRepos/ML_for_Hackers/01-Introduction") ufo <- read.delim(file.path("data", "ufo", "ufo_awesome.tsv"),                   sep = "\t",                   stringsAsFactors = FALSE,                   header = FALSE,                    na.strings = "") # This is a large text file (75MB), so this may take a moment # Inspect the data frame summary(ufo) head(ufo) # From the data's description file, we will set the column names accordingly using  # the 'names' function names(ufo) <- c("DateOccurred", "DateReported",                 "Location", "ShortDescription",                 "Duration", "LongDescription") head(ufo) ufo$DateOccurred <- as.Date(ufo$DateOccurred, format = "%Y%m%d") ufo$DateReported <- as.Date(ufo$DateReported, format = "%Y%m%d") # To work with the dates, we will need to convert the YYYYMMDD string to an R Date # type using the 'strptime' function # But, something has gone wrong with the data. For now, we'll just ignore the errata # by removing those entries that have not parsed correctly.  We know that the date  # strings are always 8 characters long, and any deviation from this would indicate # a row to ignore.  We will use the 'ifelse' function to construct a vector of # Booleans indicating the problem rows good.rows <- ifelse(nchar(ufo$DateOccurred) != 8 |                     nchar(ufo$DateReported) != 8,                     FALSE,                     TRUE) length(which(!good.rows))      # While 731 rows may seem like a lot, out of over 60K ufo <- ufo[good.rows, ]        # it is only about 0.6% of the total number of records. # Now we can convert the strings to Date objects and work with them properly ufo$DateOccurred <- as.Date(ufo$DateOccurred, format = "%Y%m%d") ufo$DateReported <- as.Date(ufo$DateReported, format = "%Y%m%d")
ufo[1,1]
ufo[,1]
ufo[1,]
library(ggplot2)    # We'll use ggplot2 for all of our visualizations library(plyr)       # For data manipulation library(scales)     # W
setwd("E:/VisualStudioRepos/ML_for_Hackers/01-Introduction") ufo <- read.delim(file.path("data", "ufo", "ufo_awesome.tsv"),                   sep = "\t",                   stringsAsFactors = FALSE,                   header = FALSE,                    na.strings = "")
summary(ufo)
head(ufo)
ufo[1,]
names(ufo) <- c("DateOccurred", "DateReported",                 "Location", "ShortDescription",                 "Duration", "LongDescription")
head(ufo)
ufo$DateOccurred <- as.Date(ufo$DateOccurred, format = "%Y%m%d")
ufo$DateReported <- as.Date(ufo$DateReported, format = "%Y%m%d")
good.rows <- ifelse(nchar(ufo$DateOccurred) != 8 |                     nchar(ufo$DateReported) != 8,                     FALSE,                     TRUE) length(which(!good.rows))      # While 731 rows may seem like a lot, out of over 60K
head(ufo)
ufo[1,]
ufo[1:5,]
someRows <- ufo[1:5,]
location <- "Richland, WA"
strsplit(location, ",")
split <- strsplit(location, ",")
gsub("^ ","", split)
get.location <- function(l) {   split.location <- tryCatch(strsplit(l, ",")[[1]], error = function(e) return(c(NA, NA)))   clean.location <- gsub("^ ","",split.location)   if (length(clean.location) > 2)   {     return(c(NA,NA))   }   else   {     return(clean.location)   } }
city.state <- lapply(ufo$Location, get.location)
location.matrix <- do.call(rbind, city.state)
ufo <- transform(ufo,                  USCity = location.matrix[, 1],                  USState = location.matrix[, 2],                  stringsAsFactors = FALSE)
ufo[ufo["USStae"] == "WA"]
ufo[ufo["USState"] == "WA"]
library(ggplot2)    # We'll use ggplot2 for all of our visualizations library(plyr)       # For data manipulation library(scales)     # We'll need to fix date formats in plots # This is a tab-delimited file, so we use 'read.delim' and set the separator as a tab character. # We also have to alter two defaults; first, we want the strings to not be converted to # factor types; and, this data has does not have header labels in the first row, so # we want to keep the first row as data. #RB - set up directory to load the data setwd("E:/VisualStudioRepos/ML_for_Hackers/01-Introduction") ufo <- read.delim(file.path("data", "ufo", "ufo_awesome.tsv"),                   sep = "\t",                   stringsAsFactors = FALSE,                   header = FALSE,                    na.strings = "") # This is a large text file (75MB), so this may take a moment # Inspect the data frame summary(ufo) head(ufo) # From the data's description file, we will set the column names accordingly using  # the 'names' function names(ufo) <- c("DateOccurred", "DateReported",                 "Location", "ShortDescription",                 "Duration", "LongDescription") head(ufo) ufo$DateOccurred <- as.Date(ufo$DateOccurred, format = "%Y%m%d") ufo$DateReported <- as.Date(ufo$DateReported, format = "%Y%m%d") # To work with the dates, we will need to convert the YYYYMMDD string to an R Date # type using the 'strptime' function # But, something has gone wrong with the data. For now, we'll just ignore the errata # by removing those entries that have not parsed correctly.  We know that the date  # strings are always 8 characters long, and any deviation from this would indicate # a row to ignore.  We will use the 'ifelse' function to construct a vector of # Booleans indicating the problem rows good.rows <- ifelse(nchar(ufo$DateOccurred) != 8 |                     nchar(ufo$DateReported) != 8,                     FALSE,                     TRUE) length(which(!good.rows))      # While 731 rows may seem like a lot, out of over 60K #ufo <- ufo[good.rows, ]        # it is only about 0.6% of the total number of records. # Now we can convert the strings to Date objects and work with them properly #ufo$DateOccurred <- as.Date(ufo$DateOccurred, format = "%Y%m%d") #ufo$DateReported <- as.Date(ufo$DateReported, format = "%Y%m%d") head(ufo) someRows <- ufo[1:5,] location <- "Richland, WA" split <- strsplit(location, ",") gsub("^ ","", split) # It will be useful to create separate columns for both town and state from the Location  # column.  To do so we will use the 'strsplit' function to perform the regex. # Note: not every entry in Location is of the form 'City, State'.  We use the # 'tryCatch' function to simply return [NA, NA] when this is the case.  Next, # we remove the leading white-space from both the city and state strings with 'gsub' get.location <- function(l) {   split.location <- tryCatch(strsplit(l, ",")[[1]], error = function(e) return(c(NA, NA)))   clean.location <- gsub("^ ","",split.location)   if (length(clean.location) > 2)   {     return(c(NA,NA))   }   else   {     return(clean.location)   } } # We use 'lapply' to return a list with [City, State] vector as each element city.state <- lapply(ufo$Location, get.location) # We use 'do.call' to collapse the list to an N-by-2 matrix location.matrix <- do.call(rbind, city.state) # Add the city and state data to ufo data frame. We can do this using the 'transform' # function. ufo <- transform(ufo,                  USCity = location.matrix[, 1],                  USState = location.matrix[, 2],                  stringsAsFactors = FALSE)
ufo[,10]
ufo[10,]
ufo[1:10,]
head(ufo)
someRows <- ufo[1:10,]
someRows["USState" == "WA"]
someRows["USState" == "IA"]
someRows[someRows[USState] == "IA"]
someRows[someRows["USState"] == "IA"]
someRows[someRows$USState == "IA"]
head(ufo)
ufo$USState <- state.abb[match(ufo$USState, state.abb)]
ufo.us <- subset(ufo, !is.na(USState))
summary(ufo.us)
head(ufo.us)
quick.hist <- ggplot(ufo.us, aes(x = DateOccurred)) +   geom_histogram() +    scale_x_date(breaks = "50 years")
ggsave(plot = quick.hist,        filename = file.path("images", "quick_hist.pdf"),        height = 6,        width = 8)
ggplot(quick.hist)
ggplot(2quick.hist)
ggplot2(quick.hist)
?ggplot2
ggplot2(ufo.us)
  scale_x_date(breaks = "50 years")
ggplot(ufo.us, aes(x = DateOccurred)) + geom_histogram() + scale_x_date(breaks = "50 years")
ggplot(ufo.us, aes(x = DateOccurred)) + geom_histogram() + scale_x_date(breaks = "50 years")
ggplot(ufo.us, aes(x = DateOccurred)) + geom_histogram() + scale_x_date(breaks = "50 years"))
ggplot(ufo.us, aes(x = DateOccurred)) + geom_histogram() + scale_x_date(breaks = "50 years")
library(scales)
ggplot(ufo.us, aes(x = DateOccurred)) + geom_histogram() + scale_x_date(breaks = date_breaks("50 years"))
ggplot(ufo.us, aes(x = DateOccurred)) + geom_histogram() + scale_x_date(breaks = date_breaks("100 years"))
quick.hist <- ggplot(ufo.us, aes(x = DateOccurred)) +   geom_histogram() +   scale_x_date(breaks = date_breaks("100 years"))
ggsave(plot = quick.hist,        filename = file.path("images", "quick_hist.pdf"),        height = 6,        width = 8)
ufo.us <- subset(ufo.us, DateOccurred >= as.Date("1990-01-01"))
  scale_x_date(breaks = date_breaks("100 years"))
ggsave(plot = new.hist,        filename = file.path("images", "new_hist.pdf"),        height = 6,        width = 8)
new.hist <- ggplot(ufo.us, aes(x = DateOccurred)) +   geom_histogram(aes(fill = 'white', color = 'red')) +   scale_fill_manual(values = c('white' = 'white'), guide = "none") +   scale_color_manual(values = c('red' = 'red'), guide = "none") +   scale_x_date(breaks = date_breaks("100 years"))
ggsave(plot = new.hist,        filename = file.path("images", "new_hist.pdf"),        height = 6,        width = 8)
new.hist <- ggplot(ufo.us, aes(x = DateOccurred)) +   geom_histogram(aes(fill = 'white', color = 'red')) +   scale_fill_manual(values = c('white' = 'white'), guide = "none") +   scale_color_manual(values = c('red' = 'red'), guide = "none") +   scale_x_date(breaks = date_breaks("10 years")) ggsave(plot = new.hist,        filename = file.path("images", "new_hist.pdf"),        height = 6,        width = 8)
new.hist <- ggplot(ufo.us, aes(x = DateOccurred)) +   geom_histogram(aes(fill = 'white', color = 'red')) +   scale_fill_manual(values = c('white' = 'white'), guide = "none") +   scale_color_manual(values = c('red' = 'red'), guide = "none") +   scale_x_date(breaks = date_breaks("1 years")) ggsave(plot = new.hist,        filename = file.path("images", "new_hist.pdf"),        height = 6,        width = 8)
new.hist <- ggplot(ufo.us, aes(x = DateOccurred)) +   geom_histogram(aes(fill = 'white', color = 'red')) +   scale_fill_manual(values = c('white' = 'white'), guide = "none") +   scale_color_manual(values = c('red' = 'red'), guide = "none") +   scale_x_date(breaks = date_breaks("2 years")) ggsave(plot = new.hist,        filename = file.path("images", "new_hist.pdf"),        height = 6,        width = 8)
ggplot(ufo.us, aes(x = DateOccurred)) +   geom_histogram(aes(fill = 'white', color = 'red')) +   scale_fill_manual(values = c('white' = 'white'), guide = "none") +   scale_color_manual(values = c('red' = 'red'), guide = "none") +   scale_x_date(breaks = date_breaks("2 years"))
gplot(ufo.us, aes(x = DateOccurred)) +   geom_histogram(aes(fill = 'white', color = 'red')) +   scale_fill_manual(values = c('white' = 'white'), guide = "none") +   scale_color_manual(values = c('red' = 'red'), guide = "none") +   scale_x_date(breaks = date_breaks("2 years")) +   theme_dark()
ggplot(ufo.us, aes(x = DateOccurred)) +   geom_histogram(aes(fill = 'white', color = 'red')) +   scale_fill_manual(values = c('white' = 'white'), guide = "none") +   scale_color_manual(values = c('red' = 'red'), guide = "none") +   scale_x_date(breaks = date_breaks("2 years")) +   theme_dark()
ufo.us$YearMonth <- strftime(ufo.us$DateOccurred, format = "%Y-%m")
sightings.counts <- ddply(ufo.us, .(USState,YearMonth), nrow)
date.range <- seq.Date(from = as.Date(min(ufo.us$DateOccurred)),                        to = as.Date(max(ufo.us$DateOccurred)),                        by = "month")
date.strings <- strftime(date.range, "%Y-%m")
states.dates <- lapply(state.abb, function(s) cbind(s, date.strings))
states.dates <- lapply(state.abb, function(s) cbind(s, date.strings))
states.dates <- data.frame(do.call(rbind, states.dates),                            stringsAsFactors = FALSE)
all.sightings <- merge(states.dates,                        sightings.counts,                        by.x = c("s", "date.strings"),                        by.y = c("USState", "YearMonth"),                        all = TRUE)
names(all.sightings) <- c("State", "YearMonth", "Sightings")
# Covert the NAs to 0's, what we really wanted all.sightings$Sightings[is.na(all.sightings$Sightings)] <- 0 # Reset the character Year-Month to a Date objects all.sightings$YearMonth <- as.Date(rep(date.range, length(state.abb))) # Capitalize the State abbreviation and set as factor all.sightings$State <- as.factor(all.sightings$State)
ggplot(all.sightings, aes(x = YearMonth,y = Sightings)) +   geom_line(aes(color = "darkblue")) +   facet_wrap(~State, nrow = 10, ncol = 5) +    theme_bw() +    scale_color_manual(values = c("darkblue" = "darkblue"), guide = "none") +   scale_x_date(breaks = "5 years", labels = date_format('%Y')) +   xlab("Years") +   ylab("Number of Sightings") +   ggtitle("Number of UFO sightings by Month-Year and U.S. State (1990-2010)")
ggplot(all.sightings, aes(x = YearMonth, y = Sightings)) +   geom_line(aes(color = "darkblue")) +   facet_wrap(~State, nrow = 10, ncol = 5) +   theme_bw() +   scale_color_manual(values = c("darkblue" = "darkblue"), guide = "none") +   #scale_x_date(breaks = "5 years", labels = date_format('%Y')) +   scale_x_date(breaks = date_breaks("5 years"), labels = date_format('%Y')   xlab("Years") +   ylab("Number of Sightings") +   ggtitle("Number of UFO sightings by Month-Year and U.S. State (1990-2010)") )
ggplot(all.sightings, aes(x = YearMonth, y = Sightings)) +   geom_line(aes(color = "darkblue")) +   facet_wrap(~State, nrow = 10, ncol = 5) +   theme_bw() +   scale_color_manual(values = c("darkblue" = "darkblue"), guide = "none") +   #scale_x_date(breaks = "5 years", labels = date_format('%Y')) +   scale_x_date(breaks = date_breaks("5 years"), labels = date_format('%Y'))   xlab("Years") +   ylab("Number of Sightings") +   ggtitle("Number of UFO sightings by Month-Year and U.S. State (1990-2010)")
state.plot <- ggplot(all.sightings, aes(x = YearMonth, y = Sightings)) +   geom_line(aes(color = "darkblue")) +   facet_wrap(~State, nrow = 10, ncol = 5) +   theme_bw() +   scale_color_manual(values = c("darkblue" = "darkblue"), guide = "none") +   #scale_x_date(breaks = "5 years", labels = date_format('%Y')) +   scale_x_date(breaks = date_breaks("5 years"), labels = date_format('%Y'))   xlab("Years") +   ylab("Number of Sightings") +   ggtitle("Number of UFO sightings by Month-Year and U.S. State (1990-2010)") # Save the plot as a PDF ggsave(plot = state.plot,        filename = file.path("images", "ufo_sightings.pdf"),        width = 14,        height = 8.5)
state.plot <- ggplot(all.sightings, aes(x = YearMonth, y = Sightings)) +   geom_line(aes(color = "darkblue")) +   facet_wrap(~State, nrow = 10, ncol = 5) +   theme_bw() +   scale_color_manual(values = c("darkblue" = "darkblue"), guide = "none") +   #scale_x_date(breaks = "5 years", labels = date_format('%Y')) +   scale_x_date(breaks = date_breaks("5 years"), labels = date_format('%Y'))   xlab("Years") +   ylab("Number of Sightings") +   ggtitle("Number of UFO sightings by Month-Year and U.S. State (1990-2010)")
ggplot(all.sightings, aes(x = YearMonth, y = Sightings)) +   geom_line(aes(color = "darkblue")) +   facet_wrap(~State, nrow = 10, ncol = 5) +   theme_bw() +   scale_color_manual(values = c("darkblue" = "darkblue"), guide = "none") +   #scale_x_date(breaks = "5 years", labels = date_format('%Y')) +   scale_x_date(breaks = date_breaks("5 years"), labels = date_format('%Y')) +   xlab("Years") +   ylab("Number of Sightings") +   ggtitle("Number of UFO sightings by Month-Year and U.S. State (1990-2010)")
state.plot <- ggplot(all.sightings, aes(x = YearMonth, y = Sightings)) +   geom_line(aes(color = "darkblue")) +   facet_wrap(~State, nrow = 10, ncol = 5) +   theme_bw() +   scale_color_manual(values = c("darkblue" = "darkblue"), guide = "none") +   #scale_x_date(breaks = "5 years", labels = date_format('%Y')) +   scale_x_date(breaks = date_breaks("5 years"), labels = date_format('%Y')) +   xlab("Years") +   ylab("Number of Sightings") +   ggtitle("Number of UFO sightings by Month-Year and U.S. State (1990-2010)")
ggsave(plot = state.plot,        filename = file.path("images", "ufo_sightings.pdf"),        width = 14,        height = 8.5)
state.pop <- read.csv(file.path('data/census.csv'), stringsAsFactors=FALSE)
library(rmarkdown)
install.packages("rmarkdown")
setwd("E:/VisualStudioRepos/ML_for_Hackers/02-Exploration")
data.file <- file.path('data', '01_heights_weights_genders.csv')
heights.weights <- read.csv(data.file, header = TRUE, sep = ',')
heights <- with(heights.weights, Height)
summary(heights)
head(heights.weights)
is.na(heights.weights$Gender)
heights.weights[1,]
heights.weights$Height <- heights.weights$Height * 2.54
heights.weights$Weight <- heights.weights$Weight * 0.454
heights.weights$Gender <- gsub("Male", "Mężczyzna", heights.weights$Gender)
heights.weights$Gender <- gsub("Female", "Kobieta", heights.weights$Gender)
summary(heights)
head(heights.weights)
summary(heights)
summary(heights)
heights <- with(heights.weights, Height)
summary(heights)
head(is.factor(heights.weights$Height))
is.factor(heights.weights)
heights.weights
is.factor(heights.weights$Gender)
heights.weights$Gender
is.factor(heights.weights$Gender)
str(heights.weights)
head(heights.weights)
heights.weights[heights.weights$Height == 187.5714,]
heights.weights[floor(heights.weights$Height) == 187,]
heights.weights[is.na(heights.weights$Gender),]
rbind(heights.weights, c("Mężczyzna", NA, 88.0))
heights.weight <- rbind(heights.weights, c("Mężczyzna", NA, 88.0))
is.na(heights.weights$Gender)
head(heights.weights)
heights.weights[is.na(heights.weights$Height),]
heights.weights$Height)
heights.weights$Height
heights.weights$Weight
tail(heights.weights)
heights.weight
tail(heights.weights)
heights.weights <- rbind(heights.weights, c("Mężczyzna", NA, 88.0))
tail(heights.weights)
heights.weights[is.na(heights.weights$Height),]
heights.weights[is.na(heights.weights$Height) | is.na(heights.weights$Weight),]
heights.weights <- rbind(heights.weights, c("Mężczyzna", 167.0, NA))
heights.weights <- rbind(heights.weights, c(NA, 167.0, 88.0))
tail(heights.weights)
heights.weights[is.na(heights.weights$Height) | is.na(heights.weights$Weight),]
heights.weights[is.na(heights.weights$Height) | is.na(heights.weights$Weight) | is.na(heights.weights$Gender),]
nrow(heights.weights[is.na(heights.weights$Height) | is.na(heights.weights$Weight) | is.na(heights.weights$Gender),])
Allrows = nrow(heights.weights)
NArows = nrow(heights.weights[is.na(heights.weights$Height) | is.na(heights.weights$Weight) | is.na(heights.weights$Gender),])
print("er")
cat("RRR ","RRR")
setwd("E:/VisualStudioRepos/ML_for_Hackers/02-Exploration") data.file <- file.path('data', '01_heights_weights_genders.csv') heights.weights <- read.csv(data.file, header = TRUE, sep = ',') heights.weights$Height <- heights.weights$Height * 2.54 heights.weights$Weight <- heights.weights$Weight * 0.454 heights.weights$Gender <- gsub("Male", "Mężczyzna", heights.weights$Gender) heights.weights$Gender <- gsub("Female", "Kobieta", heights.weights$Gender)
heights <- with(heights.weights, Height) summary(heights) head(heights.weights) tail(heights.weights)
is.factor(heights.weights$Gender)
str(heights.weights)
heights.weights[floor(heights.weights$Height) == 187,]
# Supplement a bit heights.weights <- rbind(heights.weights, c("Mężczyzna", NA, 88.0)) heights.weights <- rbind(heights.weights, c("Mężczyzna", 167.0, NA)) heights.weights <- rbind(heights.weights, c(NA, 167.0, 88.0))
heights.weights[is.na(heights.weights$Height) | is.na(heights.weights$Weight) | is.na(heights.weights$Gender),]
NArows = nrow(heights.weights[is.na(heights.weights$Height) | is.na(heights.weights$Weight) | is.na(heights.weights$Gender),])
Allrows = nrow(heights.weights)
NArows/Allrows
cat("RRR ","RRR", "TTT")
cat("RRR ", "RRR", NArows / Allrows)
cat("Percent of NA data: ", NArows / Allrows * 100)
is.na(heights.weights$Gender)
my.mean <- function(x) {   return(sum(x) / length(x)) }
my.median <- function(x) {   sorted.x <- sort(x)   if (length(x) %% 2 == 0)   {     indices <- c(length(x) / 2, length(x) / 2 + 1)     return(mean(sorted.x[indices]))   }   else   {     index <- ceiling(length(x) / 2)     return(sorted.x[index])   } }
my.vector <- c(0, 100)
my.vector
mean(my.vector)
median(my.vector)
my.vector <- c(0, 0, 100)
mean(my.vector)
median(my.vector)
my.mean(heights)
min(heights)
max(heights)
c(min(heights), max(heights))
range(heights)
quantile(heights)
quantile(heights,bins=10)
quantile(heights, probs = seq(0, 1, by = 0.2))
quantile(heights, probs = seq(0, 1, by = 0.1))
quantile(heights, probs = 0.25)
c(quantile(heights, probs = 0.25), quantile(heights, probs = 0.75))
library('ggplot2')
data.file <- file.path('data', '01_heights_weights_genders.csv')
heights.weights <- read.csv(data.file, header = TRUE, sep = ',')
ggplot(heights.weights, aes(x = Height)) +   geom_histogram(binwidth = 1)
ggplot(heights.weights, aes(x = Height)) +   geom_histogram(binwidth = 5)
ggplot(heights.weights, aes(x = Height)) +   geom_histogram(binwidth = 0.01)
data.file <- file.path('data', '01_heights_weights_genders.csv')
heights.weights$Height <- heights.weights$Height * 2.54
heights.weights$Weight <- heights.weights$Weight * 0.454
heights.weights$Gender <- gsub("Male", "Mężczyzna", heights.weights$Gender)
heights.weights$Gender <- gsub("Female", "Kobieta", heights.weights$Gender)
ggplot(heights.weights, aes(x = Height)) + geom_histogram(binwidth = 1) + labs(x = "Wzrost", y = "liczba")
ggplot(heights.weights, aes(x = Height)) + geom_histogram(binwidth = 1) + labs(x = "Wzrost", y = "liczba")
ggplot(heights.weights, aes(x = Height)) +   geom_histogram(binwidth = 1)
ggplot(heights.weights, aes(x = Height)) +   geom_histogram(binwidth = 1) + labs(x = "Wzrost", y = "liczba")
ggplot(heights.weights, aes(x = Height)) +   geom_histogram(binwidth = 2) + labs(x = "Wzrost", y = "liczba")
library(ggplot2)    # We'll use ggplot2 for all of our visualizations library(plyr)       # For data manipulation library(scales) # We'll need to fix date formats in plots library(rmarkdown)
setwd("E:/VisualStudioRepos/ML_for_Hackers/01-Introduction") ufo <- read.delim(file.path("data", "ufo", "ufo_awesome.tsv"),                   sep = "\t",                   stringsAsFactors = FALSE,                   header = FALSE,                    na.strings = "")
summary(ufo) head(ufo) # From the data's description file, we will set the column names accordingly using  # the 'names' function names(ufo) <- c("DateOccurred", "DateReported",                 "Location", "ShortDescription",                 "Duration", "LongDescription") head(ufo) ufo$DateOccurred <- as.Date(ufo$DateOccurred, format = "%Y%m%d") ufo$DateReported <- as.Date(ufo$DateReported, format = "%Y%m%d")
good.rows <- ifelse(nchar(ufo$DateOccurred) != 8 |                     nchar(ufo$DateReported) != 8,                     FALSE,                     TRUE) length(which(!good.rows))   
head(ufo) someRows <- ufo[1:5,] location <- "Richland, WA" split <- strsplit(location, ",") gsub("^ ","", split)
get.location <- function(l) {   split.location <- tryCatch(strsplit(l, ",")[[1]], error = function(e) return(c(NA, NA)))   clean.location <- gsub("^ ","",split.location)   if (length(clean.location) > 2)   {     return(c(NA,NA))   }   else   {     return(clean.location)   } }
city.state <- lapply(ufo$Location, get.location) # We use 'do.call' to collapse the list to an N-by-2 matrix location.matrix <- do.call(rbind, city.state) # Add the city and state data to ufo data frame. We can do this using the 'transform' # function. ufo <- transform(ufo,                  USCity = location.matrix[, 1],                  USState = location.matrix[, 2],                  stringsAsFactors = FALSE)
ufo$USState <- state.abb[match(ufo$USState, state.abb)]
ufo.us <- subset(ufo, !is.na(USState))
summary(ufo.us) head(ufo.us)
quick.hist <- ggplot(ufo.us, aes(x = DateOccurred)) +   geom_histogram() +   scale_x_date(breaks = date_breaks("100 years"))
ggplot(ufo.us, aes(x = DateOccurred)) + geom_histogram() + scale_x_date(breaks = date_breaks("100 years"))
ggsave(plot = quick.hist,        filename = file.path("images", "quick_hist.pdf"),        height = 6,        width = 8)
data.file <- file.path('data', '01_heights_weights_genders.csv') heights.weights <- read.csv(data.file, header = TRUE, sep = ',') # Przelicz jednostki i zamień symbole płci heights.weights$Height <- heights.weights$Height * 2.54 heights.weights$Weight <- heights.weights$Weight * 0.454 heights.weights$Gender <- gsub("Male", "Mężczyzna", heights.weights$Gender) heights.weights$Gender <- gsub("Female", "Kobieta", heights.weights$Gender) ggplot(heights.weights, aes(x = Height)) +   geom_histogram(binwidth = 2) + labs(x = "Wzrost", y = "liczba")
setwd("E:/VisualStudioRepos/ML_for_Hackers/02-Exploration")
data.file <- file.path('data', '01_heights_weights_genders.csv') heights.weights <- read.csv(data.file, header = TRUE, sep = ',') # Przelicz jednostki i zamień symbole płci heights.weights$Height <- heights.weights$Height * 2.54 heights.weights$Weight <- heights.weights$Weight * 0.454 heights.weights$Gender <- gsub("Male", "Mężczyzna", heights.weights$Gender) heights.weights$Gender <- gsub("Female", "Kobieta", heights.weights$Gender) ggplot(heights.weights, aes(x = Height)) +   geom_histogram(binwidth = 2) + labs(x = "Wzrost", y = "liczba")
ggplot(heights.weights, aes(x = Height)) + geom_density() + labs(x = "Wzrost", y = "gęstość")
ggplot(heights.weights, aes(x = Height)) + geom_density() + labs(x = "Wzrost", y = "gęstość")
ggplot(heights.weights, aes(x = Height)) + geom_density() + labs(x = "Wzrost", y = "gęstość")
ggplot(heights.weights, aes(x = Height, fill = Gender)) + geom_density() + labs(x = "Wzrost", y = "gęstość", fill = "Płeć")
20*0.55
20*0.055
ggplot(heights.weights, aes(x = Weight, fill = Gender)) + geom_density() + labs(x = "Waga", y = "gęstość", fill = "Płeć")
ggplot(heights.weights, aes(x = Height, fill = Gender)) + geom_density() + labs(x = "Wzrost", y = "gęstość", fill = "Płeć") + facet_grid(Gender ~ .)
ggplot(heights.weights, aes(x = Height, y = Weight)) + geom_point() + labs(x = "Wzrost", y = "Waga")
ggplot(heights.weights, aes(x = Height, y = Weight)) + geom_point() + labs(x = "Wzrost", y = "Waga") + geom_smooth()
ggplot(heights.weights[1:20,], aes(x = Height, y = Weight)) + geom_point() + labs(x = "Wzrost", y = "Waga") + geom_smooth()
ggplot(heights.weights[1:200,], aes(x = Height, y = Weight)) + geom_point() + labs(x = "Wzrost", y = "Waga") + geom_smooth()
ggplot(heights.weights[1:2000,], aes(x = Height, y = Weight)) + geom_point() + labs(x = "Wzrost", y = "Waga") + geom_smooth()
ggplot(heights.weights, aes(x = Height, y = Weight, color = Gender)) + geom_point() + labs(x = "Wzrost", y = "Waga", color = "Płeć")
heights.weights <- transform(heights.weights, Male = ifelse(Gender == 'Mężczyzna', 1, 0))
logit.model <- glm(Male ~ Height + Weight, data = heights.weights, family = binomial(link = 'logit'))
slope = -coef(logit.model)[3] / coef(logit.model)[2],
ggplot(heights.weights, aes(x = Weight, y = Height, color = Gender)) + geom_point() + stat_abline(intercept = -coef(logit.model)[1] / coef(logit.model)[2], slope = -coef(logit.model)[3] / coef(logit.model)[2], geom = 'abline', color = 'black')
heights.weights <- transform(heights.weights,                              Male = ifelse(Gender == 'Male', 1, 0)) logit.model <- glm(Male ~ Weight + Height,                    data = heights.weights,                    family = binomial(link = 'logit')) ggplot(heights.weights, aes(x = Height, y = Weight)) +   geom_point(aes(color = Gender, alpha = 0.25)) +   scale_alpha(guide = "none") +    scale_color_manual(values = c("Male" = "black", "Female" = "gray")) +   theme_bw() +   stat_abline(intercept = -coef(logit.model)[1] / coef(logit.model)[2],               slope = - coef(logit.model)[3] / coef(logit.model)[2],               geom = 'abline',               color = 'black')
spam.path <- file.path("E:\\VisualStudioRepos\\ML_for_Hackers\\03-Classification\\data", "spam")
library('tm')
install.packages("tm")
library('tm')
library('ggplot2')
spam.path <- file.path("E:\\VisualStudioRepos\\ML_for_Hackers\\03-Classification\\data", "spam") spam2.path <- file.path("E:\\VisualStudioRepos\\ML_for_Hackers\\03-Classification\\data", "spam_2") easyham.path <- file.path("E:\\VisualStudioRepos\\ML_for_Hackers\\03-Classification\\data", "easy_ham") easyham2.path <- file.path("E:\\VisualStudioRepos\\ML_for_Hackers\\03-Classification\\data", "easy_ham_2") hardham.path <- file.path("E:\\VisualStudioRepos\\ML_for_Hackers\\03-Classification\\data", "hard_ham") hardham2.path <- file.path("E:\\VisualStudioRepos\\ML_for_Hackers\\03-Classification\\data", "hard_ham_2")
x <- runif(1000, 0, 40)
y1 <- cbind(runif(100, 0, 10), 1)
y2 <- cbind(runif(800, 10, 30), 2)
y3 <- cbind(runif(100, 30, 40), 1)
val <- data.frame(cbind(x, rbind(y1, y2, y3)),                   stringsAsFactors = TRUE)
ex1 <- ggplot(val, aes(x, V2)) +   geom_jitter(aes(shape = as.factor(V3)),                   position = position_jitter(height = 2)) +   scale_shape_discrete(guide = "none", solid = FALSE) +   geom_hline(aes(yintercept = c(10,30)), linetype = 2) +   theme_bw() +   xlab("X") +   ylab("Y")
ggsave(plot = ex1,        filename = file.path("E:\\VisualStudioRepos\\ML_for_Hackers\\03-Classification\\images", "00_Ex1.pdf"),        height = 10,        width = 10)
library('tm')
install.packages("tm")
library('tm')
library('ggplot2')
spam.path <- file.path("E:\\VisualStudioRepos\\ML_for_Hackers\\03-Classification\\data", "spam") spam2.path <- file.path("E:\\VisualStudioRepos\\ML_for_Hackers\\03-Classification\\data", "spam_2") easyham.path <- file.path("E:\\VisualStudioRepos\\ML_for_Hackers\\03-Classification\\data", "easy_ham") easyham2.path <- file.path("E:\\VisualStudioRepos\\ML_for_Hackers\\03-Classification\\data", "easy_ham_2") hardham.path <- file.path("E:\\VisualStudioRepos\\ML_for_Hackers\\03-Classification\\data", "hard_ham") hardham2.path <- file.path("E:\\VisualStudioRepos\\ML_for_Hackers\\03-Classification\\data", "hard_ham_2")
x <- runif(1000, 0, 40)
y1 <- cbind(runif(100, 0, 10), 1)
y2 <- cbind(runif(800, 10, 30), 2)
y3 <- cbind(runif(100, 30, 40), 1)
val <- data.frame(cbind(x, rbind(y1, y2, y3)),                   stringsAsFactors = TRUE)
val <- data.frame(cbind(x, rbind(y1, y2, y3)),                   stringsAsFactors = TRUE) ex1 <- ggplot(val, aes(x, V2)) +   geom_jitter(aes(shape = as.factor(V3)),                   position = position_jitter(height = 2)) +   scale_shape_discrete(guide = "none", solid = FALSE) +   geom_hline(aes(yintercept = c(10,30)), linetype = 2) +   theme_bw() +   xlab("X") +   ylab("Y")
ggsave(plot = ex1,        filename = file.path("E:\\VisualStudioRepos\\ML_for_Hackers\\03-Classification\\images", "00_Ex1.pdf"),        height = 10,        width = 10)
ggplot(val, aes(x, V2)) +   geom_jitter(aes(shape = as.factor(V3)),                   position = position_jitter(height = 2)) +   scale_shape_discrete(guide = "none", solid = FALSE) +   geom_hline(aes(yintercept = c(10, 30)), linetype = 2) +   theme_bw() +   xlab("X") +   ylab("Y")
library('tm') library('ggplot2') # Set the global paths spam.path <- file.path("E:\\VisualStudioRepos\\ML_for_Hackers\\03-Classification\\data", "spam") spam2.path <- file.path("E:\\VisualStudioRepos\\ML_for_Hackers\\03-Classification\\data", "spam_2") easyham.path <- file.path("E:\\VisualStudioRepos\\ML_for_Hackers\\03-Classification\\data", "easy_ham") easyham2.path <- file.path("E:\\VisualStudioRepos\\ML_for_Hackers\\03-Classification\\data", "easy_ham_2") hardham.path <- file.path("E:\\VisualStudioRepos\\ML_for_Hackers\\03-Classification\\data", "hard_ham") hardham2.path <- file.path("E:\\VisualStudioRepos\\ML_for_Hackers\\03-Classification\\data", "hard_ham_2") # Create motivating plot x <- runif(1000, 0, 40) y1 <- cbind(runif(100, 0, 10), 1) y2 <- cbind(runif(800, 10, 30), 2) y3 <- cbind(runif(100, 30, 40), 1) val <- data.frame(cbind(x, rbind(y1, y2, y3)),                   stringsAsFactors = TRUE)
ggplot(val, aes(x, V2)) +   geom_jitter(aes(shape = as.factor(V3)),                   position = position_jitter(height = 2)) +   scale_shape_discrete(guide = "none", solid = FALSE) +   geom_hline(aes(yintercept = c(10, 30)), linetype = 2) +   theme_bw() +   xlab("X") +   ylab("Y")
get.msg <- function(path) {   con <- file(path, open = "rt", encoding = "latin1")   text <- readLines(con)   # The message always begins after the first full line break   msg <- text[seq(which(text == "")[1] + 1, length(text), 1)]   close(con)   return(paste(msg, collapse = "\n")) }
get.tdm <- function(doc.vec) {   control <- list(stopwords = TRUE,                   removePunctuation = TRUE,                   removeNumbers = TRUE,                   minDocFreq = 2)   doc.corpus <- Corpus(VectorSource(doc.vec))   doc.dtm <- TermDocumentMatrix(doc.corpus, control)   return(doc.dtm) }
count.word <- function(path, term) {   msg <- get.msg(path)   msg.corpus <- Corpus(VectorSource(msg))   # Hard-coded TDM control   control <- list(stopwords = TRUE,                   removePunctuation = TRUE,                   removeNumbers = TRUE)   msg.tdm <- TermDocumentMatrix(msg.corpus, control)   word.freq <- rowSums(as.matrix(msg.tdm))   term.freq <- word.freq[which(names(word.freq) == term)]   # We use ifelse here because term.freq = NA if nothing is found   return(ifelse(length(term.freq) > 0, term.freq, 0)) }
classify.email <- function(path, training.df, prior = 0.5, c = 1e-6) {   # Here, we use many of the support functions to get the   # email text data in a workable format   msg <- get.msg(path)   msg.tdm <- get.tdm(msg)   msg.freq <- rowSums(as.matrix(msg.tdm))   # Find intersections of words   msg.match <- intersect(names(msg.freq), training.df$term)   # Now, we just perform the naive Bayes calculation   if(length(msg.match) < 1)   {     return(prior * c ^ (length(msg.freq)))   }   else   {     match.probs <- training.df$occurrence[match(msg.match, training.df$term)]     return(prior * prod(match.probs) * c ^ (length(msg.freq) - length(msg.match)))   } }
spam.docs <- dir(spam.path)
spam.docs <- spam.docs[which(spam.docs != "cmds")]
all.spam <- sapply(spam.docs,                    function(p) get.msg(file.path(spam.path, p)))
all.spam
spam.docs
all.spam <- sapply(spam.docs,                    function(p) get.msg(file.path(spam.path, p)))
install.packages("tm") library('tm') library('ggplot2')
library('tm') library('ggplot2')
spam.path <- file.path("E:\\VisualStudioRepos\\ML_for_Hackers\\03-Classification\\data", "spam") spam2.path <- file.path("E:\\VisualStudioRepos\\ML_for_Hackers\\03-Classification\\data", "spam_2") easyham.path <- file.path("E:\\VisualStudioRepos\\ML_for_Hackers\\03-Classification\\data", "easy_ham") easyham2.path <- file.path("E:\\VisualStudioRepos\\ML_for_Hackers\\03-Classification\\data", "easy_ham_2") hardham.path <- file.path("E:\\VisualStudioRepos\\ML_for_Hackers\\03-Classification\\data", "hard_ham") hardham2.path <- file.path("E:\\VisualStudioRepos\\ML_for_Hackers\\03-Classification\\data", "hard_ham_2")
x <- runif(1000, 0, 40) y1 <- cbind(runif(100, 0, 10), 1) y2 <- cbind(runif(800, 10, 30), 2) y3 <- cbind(runif(100, 30, 40), 1)
y1
ggplot(y1)
runif(100, 0, 10)
cbind(runif(100, 0, 10), 1)
runif(1000, 0, 40)
data.frame(y1)
range(0,100)
len(data.frame(y1))
length(data.frame(y1))
data.frame(y1)
nrow(data.frame(y1))
data.frame[,1]
data.frame(y1)[,1]
ggplot(x = seq(0, nrow(data.frame(y1)), y=data.frame(y1)[,1] ) ggplot(x = seq(0, nrow(data.frame(y1)), y=data.frame(y1)[,1] )) )
ggplot(x = seq(0, nrow(data.frame(y1))), y=data.frame(y1)[,1] )
ggplot(data.frame(y1))
qplot(x = seq(0, nrow(data.frame(y1))), y = data.frame(y1)[, 1])
tmpDF <- data.frame(y1)
qplot(data = tmpDF)
qplot(data = tmpDF, geom = 'point')
qplot(hp, mpg, data = tmpDF, geom = 'point')
mtcars
tmpDF
colnames(tmpDF) <- c('value', 'category')
tmpDF
qplot(value, data = tmpDF, geom = 'point')
qplot(y=value, data = tmpDF, geom = 'point')
qplot(x=1:nrow(tmpDF) , y=value, data = tmpDF, geom = 'point')
qplot(x=1:nrow(tmpDF) , y=value, data=tmpDF, geom = 'point')
tmpDF <- data.frame(runif(100, 0, 10))
colnames(tmpDF) <- c('value')
qplot(x=1:nrow(tmpDF) ,y=value, data=tmpDF, geom='point')
tmpDF <- data.frame(runif(10000, 0, 10))
colnames(tmpDF) <- c('value')
qplot(x=1:nrow(tmpDF) ,y=value, data=tmpDF, geom='point')
mean(tmpDF['value'])
tmpDF['value']
mean(tmpDF['value'])
mean(tmpDF[,'value'])
val <- data.frame(cbind(x, rbind(y1, y2, y3)),                   stringsAsFactors = TRUE)
ex1 <- ggplot(val, aes(x, V2)) +   geom_jitter(aes(shape = as.factor(V3)),                   position = position_jitter(height = 2)) +   scale_shape_discrete(guide = "none", solid = FALSE) +   geom_hline(aes(yintercept = c(10, 30)), linetype = 2) +   theme_bw() +   xlab("X") +   ylab("Y")
ggplot(val, aes(x, V2)) +   geom_jitter(aes(shape = as.factor(V3)),                   position = position_jitter(height = 2)) +   scale_shape_discrete(guide = "none", solid = FALSE) +   geom_hline(aes(yintercept = c(10, 30)), linetype = 2) +   theme_bw() +   xlab("X") +   ylab("Y")
ggplot(val, aes(x, V2)) + #  geom_jitter(aes(shape = as.factor(V3)), #                  position = position_jitter(height = 2)) +   scale_shape_discrete(guide = "none", solid = FALSE) +   geom_hline(aes(yintercept = c(10, 30)), linetype = 2) +   theme_bw() +   xlab("X") +   ylab("Y")
val <- data.frame(cbind(x, rbind(y1, y2, y3)),                   stringsAsFactors = TRUE)
ggplot(val, aes(x, V2)) + #  geom_jitter(aes(shape = as.factor(V3)), #                  position = position_jitter(height = 2)) +   scale_shape_discrete(guide = "none", solid = FALSE) +   geom_hline(aes(yintercept = c(10, 30)), linetype = 2) +   theme_bw() +   xlab("X") +   ylab("Y")
xx = val[,'x']
V2V2 = val[,'V2']
ggplot(val, aes(xx, V2V2)) + #  geom_jitter(aes(shape = as.factor(V3)), #                  position = position_jitter(height = 2)) +   scale_shape_discrete(guide = "none", solid = FALSE) +   geom_hline(aes(yintercept = c(10, 30)), linetype = 2) +   theme_bw() +   xlab("X") +   ylab("Y")
ggplot(val, aes(x=xx, y=V2V2)) + #  geom_jitter(aes(shape = as.factor(V3)), #                  position = position_jitter(height = 2)) +   scale_shape_discrete(guide = "none", solid = FALSE) +   geom_hline(aes(yintercept = c(10, 30)), linetype = 2) +   theme_bw() +   xlab("X") +   ylab("Y")
ggplot(val, aes(x=xx, y=V2V2))
c(10, 30)
ggplot(val, aes(x, V2))
ggplot(val, aes(x, V2)) + #  geom_jitter(aes(shape = as.factor(V3)), #                  position = position_jitter(height = 2)) +   scale_shape_discrete(guide = "none", solid = FALSE)
ggplot(val, aes(x, V2)) +   geom_jitter(aes(shape = as.factor(V3)),                   position = position_jitter(height = 2))
