library(ggplot2)    # We'll use ggplot2 for all of our visualizations library(plyr)       # For data manipulation library(scales)     # We'll need to fix date formats in plots
setwd("E:\VisualStudioRepos\ML_for_Hackers\01-Introduction")
setwd("E:/VisualStudioRepos/ML_for_Hackers/01-Introduction")
ufo <- read.delim(file.path("data", "ufo", "ufo_awesome.tsv"),                   sep = "\t",                   stringsAsFactors = FALSE,                   header = FALSE,                    na.strings = "")
summary(ufo)
?summary
head(ufo)
names(ufo) <- c("DateOccurred", "DateReported",                 "Location", "ShortDescription",                 "Duration", "LongDescription")
head(ufo)
ufo$DateOccurred
ufo$DateOccurred <- as.Date(ufo$DateOccurred, format = "%Y%m%d")
library(ggplot2)    # We'll use ggplot2 for all of our visualizations library(plyr)       # For data manipulation library(scales)     # We'll need to fix date formats in plots # This is a tab-delimited file, so we use 'read.delim' and set the separator as a tab character. # We also have to alter two defaults; first, we want the strings to not be converted to # factor types; and, this data has does not have header labels in the first row, so # we want to keep the first row as data. #RB - set up directory to load the data setwd("E:/VisualStudioRepos/ML_for_Hackers/01-Introduction") ufo <- read.delim(file.path("data", "ufo", "ufo_awesome.tsv"),                   sep = "\t",                   stringsAsFactors = FALSE,                   header = FALSE,                    na.strings = "") # This is a large text file (75MB), so this may take a moment # Inspect the data frame summary(ufo) head(ufo) # From the data's description file, we will set the column names accordingly using  # the 'names' function names(ufo) <- c("DateOccurred", "DateReported",                 "Location", "ShortDescription",                 "Duration", "LongDescription")
ufo$DateOccurred <- as.Date(ufo$DateOccurred, format = "%Y%m%d")
ufo$DateReported <- as.Date(ufo$DateReported, format = "%Y%m%d")
head(ufo)
ufo[1]
ufo[,1]
ufo[1,1]
library(ggplot2)    # We'll use ggplot2 for all of our visualizations library(plyr)       # For data manipulation library(scales)     # We'll need to fix date formats in plots # This is a tab-delimited file, so we use 'read.delim' and set the separator as a tab character. # We also have to alter two defaults; first, we want the strings to not be converted to # factor types; and, this data has does not have header labels in the first row, so # we want to keep the first row as data. #RB - set up directory to load the data setwd("E:/VisualStudioRepos/ML_for_Hackers/01-Introduction") ufo <- read.delim(file.path("data", "ufo", "ufo_awesome.tsv"),                   sep = "\t",                   stringsAsFactors = FALSE,                   header = FALSE,                    na.strings = "") # This is a large text file (75MB), so this may take a moment # Inspect the data frame summary(ufo) head(ufo) # From the data's description file, we will set the column names accordingly using  # the 'names' function names(ufo) <- c("DateOccurred", "DateReported",                 "Location", "ShortDescription",                 "Duration", "LongDescription") head(ufo) ufo$DateOccurred <- as.Date(ufo$DateOccurred, format = "%Y%m%d") ufo$DateReported <- as.Date(ufo$DateReported, format = "%Y%m%d") # To work with the dates, we will need to convert the YYYYMMDD string to an R Date # type using the 'strptime' function # But, something has gone wrong with the data. For now, we'll just ignore the errata # by removing those entries that have not parsed correctly.  We know that the date  # strings are always 8 characters long, and any deviation from this would indicate # a row to ignore.  We will use the 'ifelse' function to construct a vector of # Booleans indicating the problem rows good.rows <- ifelse(nchar(ufo$DateOccurred) != 8 |                     nchar(ufo$DateReported) != 8,                     FALSE,                     TRUE) length(which(!good.rows))      # While 731 rows may seem like a lot, out of over 60K ufo <- ufo[good.rows, ]        # it is only about 0.6% of the total number of records. # Now we can convert the strings to Date objects and work with them properly ufo$DateOccurred <- as.Date(ufo$DateOccurred, format = "%Y%m%d") ufo$DateReported <- as.Date(ufo$DateReported, format = "%Y%m%d")
ufo[1,1]
ufo[,1]
ufo[1,]
library(ggplot2)    # We'll use ggplot2 for all of our visualizations library(plyr)       # For data manipulation library(scales)     # W
setwd("E:/VisualStudioRepos/ML_for_Hackers/01-Introduction") ufo <- read.delim(file.path("data", "ufo", "ufo_awesome.tsv"),                   sep = "\t",                   stringsAsFactors = FALSE,                   header = FALSE,                    na.strings = "")
summary(ufo)
head(ufo)
ufo[1,]
names(ufo) <- c("DateOccurred", "DateReported",                 "Location", "ShortDescription",                 "Duration", "LongDescription")
head(ufo)
ufo$DateOccurred <- as.Date(ufo$DateOccurred, format = "%Y%m%d")
ufo$DateReported <- as.Date(ufo$DateReported, format = "%Y%m%d")
good.rows <- ifelse(nchar(ufo$DateOccurred) != 8 |                     nchar(ufo$DateReported) != 8,                     FALSE,                     TRUE) length(which(!good.rows))      # While 731 rows may seem like a lot, out of over 60K
head(ufo)
ufo[1,]
ufo[1:5,]
someRows <- ufo[1:5,]
location <- "Richland, WA"
strsplit(location, ",")
split <- strsplit(location, ",")
gsub("^ ","", split)
get.location <- function(l) {   split.location <- tryCatch(strsplit(l, ",")[[1]], error = function(e) return(c(NA, NA)))   clean.location <- gsub("^ ","",split.location)   if (length(clean.location) > 2)   {     return(c(NA,NA))   }   else   {     return(clean.location)   } }
city.state <- lapply(ufo$Location, get.location)
location.matrix <- do.call(rbind, city.state)
ufo <- transform(ufo,                  USCity = location.matrix[, 1],                  USState = location.matrix[, 2],                  stringsAsFactors = FALSE)
ufo[ufo["USStae"] == "WA"]
ufo[ufo["USState"] == "WA"]
library(ggplot2)    # We'll use ggplot2 for all of our visualizations library(plyr)       # For data manipulation library(scales)     # We'll need to fix date formats in plots # This is a tab-delimited file, so we use 'read.delim' and set the separator as a tab character. # We also have to alter two defaults; first, we want the strings to not be converted to # factor types; and, this data has does not have header labels in the first row, so # we want to keep the first row as data. #RB - set up directory to load the data setwd("E:/VisualStudioRepos/ML_for_Hackers/01-Introduction") ufo <- read.delim(file.path("data", "ufo", "ufo_awesome.tsv"),                   sep = "\t",                   stringsAsFactors = FALSE,                   header = FALSE,                    na.strings = "") # This is a large text file (75MB), so this may take a moment # Inspect the data frame summary(ufo) head(ufo) # From the data's description file, we will set the column names accordingly using  # the 'names' function names(ufo) <- c("DateOccurred", "DateReported",                 "Location", "ShortDescription",                 "Duration", "LongDescription") head(ufo) ufo$DateOccurred <- as.Date(ufo$DateOccurred, format = "%Y%m%d") ufo$DateReported <- as.Date(ufo$DateReported, format = "%Y%m%d") # To work with the dates, we will need to convert the YYYYMMDD string to an R Date # type using the 'strptime' function # But, something has gone wrong with the data. For now, we'll just ignore the errata # by removing those entries that have not parsed correctly.  We know that the date  # strings are always 8 characters long, and any deviation from this would indicate # a row to ignore.  We will use the 'ifelse' function to construct a vector of # Booleans indicating the problem rows good.rows <- ifelse(nchar(ufo$DateOccurred) != 8 |                     nchar(ufo$DateReported) != 8,                     FALSE,                     TRUE) length(which(!good.rows))      # While 731 rows may seem like a lot, out of over 60K #ufo <- ufo[good.rows, ]        # it is only about 0.6% of the total number of records. # Now we can convert the strings to Date objects and work with them properly #ufo$DateOccurred <- as.Date(ufo$DateOccurred, format = "%Y%m%d") #ufo$DateReported <- as.Date(ufo$DateReported, format = "%Y%m%d") head(ufo) someRows <- ufo[1:5,] location <- "Richland, WA" split <- strsplit(location, ",") gsub("^ ","", split) # It will be useful to create separate columns for both town and state from the Location  # column.  To do so we will use the 'strsplit' function to perform the regex. # Note: not every entry in Location is of the form 'City, State'.  We use the # 'tryCatch' function to simply return [NA, NA] when this is the case.  Next, # we remove the leading white-space from both the city and state strings with 'gsub' get.location <- function(l) {   split.location <- tryCatch(strsplit(l, ",")[[1]], error = function(e) return(c(NA, NA)))   clean.location <- gsub("^ ","",split.location)   if (length(clean.location) > 2)   {     return(c(NA,NA))   }   else   {     return(clean.location)   } } # We use 'lapply' to return a list with [City, State] vector as each element city.state <- lapply(ufo$Location, get.location) # We use 'do.call' to collapse the list to an N-by-2 matrix location.matrix <- do.call(rbind, city.state) # Add the city and state data to ufo data frame. We can do this using the 'transform' # function. ufo <- transform(ufo,                  USCity = location.matrix[, 1],                  USState = location.matrix[, 2],                  stringsAsFactors = FALSE)
ufo[,10]
ufo[10,]
ufo[1:10,]
head(ufo)
someRows <- ufo[1:10,]
someRows["USState" == "WA"]
someRows["USState" == "IA"]
someRows[someRows[USState] == "IA"]
someRows[someRows["USState"] == "IA"]
someRows[someRows$USState == "IA"]
head(ufo)
ufo$USState <- state.abb[match(ufo$USState, state.abb)]
ufo.us <- subset(ufo, !is.na(USState))
summary(ufo.us)
head(ufo.us)
quick.hist <- ggplot(ufo.us, aes(x = DateOccurred)) +   geom_histogram() +    scale_x_date(breaks = "50 years")
ggsave(plot = quick.hist,        filename = file.path("images", "quick_hist.pdf"),        height = 6,        width = 8)
ggplot(quick.hist)
ggplot(2quick.hist)
ggplot2(quick.hist)
?ggplot2
ggplot2(ufo.us)
  scale_x_date(breaks = "50 years")
ggplot(ufo.us, aes(x = DateOccurred)) + geom_histogram() + scale_x_date(breaks = "50 years")
ggplot(ufo.us, aes(x = DateOccurred)) + geom_histogram() + scale_x_date(breaks = "50 years")
ggplot(ufo.us, aes(x = DateOccurred)) + geom_histogram() + scale_x_date(breaks = "50 years"))
ggplot(ufo.us, aes(x = DateOccurred)) + geom_histogram() + scale_x_date(breaks = "50 years")
library(scales)
ggplot(ufo.us, aes(x = DateOccurred)) + geom_histogram() + scale_x_date(breaks = date_breaks("50 years"))
ggplot(ufo.us, aes(x = DateOccurred)) + geom_histogram() + scale_x_date(breaks = date_breaks("100 years"))
quick.hist <- ggplot(ufo.us, aes(x = DateOccurred)) +   geom_histogram() +   scale_x_date(breaks = date_breaks("100 years"))
ggsave(plot = quick.hist,        filename = file.path("images", "quick_hist.pdf"),        height = 6,        width = 8)
ufo.us <- subset(ufo.us, DateOccurred >= as.Date("1990-01-01"))
  scale_x_date(breaks = date_breaks("100 years"))
ggsave(plot = new.hist,        filename = file.path("images", "new_hist.pdf"),        height = 6,        width = 8)
new.hist <- ggplot(ufo.us, aes(x = DateOccurred)) +   geom_histogram(aes(fill = 'white', color = 'red')) +   scale_fill_manual(values = c('white' = 'white'), guide = "none") +   scale_color_manual(values = c('red' = 'red'), guide = "none") +   scale_x_date(breaks = date_breaks("100 years"))
ggsave(plot = new.hist,        filename = file.path("images", "new_hist.pdf"),        height = 6,        width = 8)
new.hist <- ggplot(ufo.us, aes(x = DateOccurred)) +   geom_histogram(aes(fill = 'white', color = 'red')) +   scale_fill_manual(values = c('white' = 'white'), guide = "none") +   scale_color_manual(values = c('red' = 'red'), guide = "none") +   scale_x_date(breaks = date_breaks("10 years")) ggsave(plot = new.hist,        filename = file.path("images", "new_hist.pdf"),        height = 6,        width = 8)
new.hist <- ggplot(ufo.us, aes(x = DateOccurred)) +   geom_histogram(aes(fill = 'white', color = 'red')) +   scale_fill_manual(values = c('white' = 'white'), guide = "none") +   scale_color_manual(values = c('red' = 'red'), guide = "none") +   scale_x_date(breaks = date_breaks("1 years")) ggsave(plot = new.hist,        filename = file.path("images", "new_hist.pdf"),        height = 6,        width = 8)
new.hist <- ggplot(ufo.us, aes(x = DateOccurred)) +   geom_histogram(aes(fill = 'white', color = 'red')) +   scale_fill_manual(values = c('white' = 'white'), guide = "none") +   scale_color_manual(values = c('red' = 'red'), guide = "none") +   scale_x_date(breaks = date_breaks("2 years")) ggsave(plot = new.hist,        filename = file.path("images", "new_hist.pdf"),        height = 6,        width = 8)
ggplot(ufo.us, aes(x = DateOccurred)) +   geom_histogram(aes(fill = 'white', color = 'red')) +   scale_fill_manual(values = c('white' = 'white'), guide = "none") +   scale_color_manual(values = c('red' = 'red'), guide = "none") +   scale_x_date(breaks = date_breaks("2 years"))
gplot(ufo.us, aes(x = DateOccurred)) +   geom_histogram(aes(fill = 'white', color = 'red')) +   scale_fill_manual(values = c('white' = 'white'), guide = "none") +   scale_color_manual(values = c('red' = 'red'), guide = "none") +   scale_x_date(breaks = date_breaks("2 years")) +   theme_dark()
ggplot(ufo.us, aes(x = DateOccurred)) +   geom_histogram(aes(fill = 'white', color = 'red')) +   scale_fill_manual(values = c('white' = 'white'), guide = "none") +   scale_color_manual(values = c('red' = 'red'), guide = "none") +   scale_x_date(breaks = date_breaks("2 years")) +   theme_dark()
ufo.us$YearMonth <- strftime(ufo.us$DateOccurred, format = "%Y-%m")
sightings.counts <- ddply(ufo.us, .(USState,YearMonth), nrow)
date.range <- seq.Date(from = as.Date(min(ufo.us$DateOccurred)),                        to = as.Date(max(ufo.us$DateOccurred)),                        by = "month")
date.strings <- strftime(date.range, "%Y-%m")
states.dates <- lapply(state.abb, function(s) cbind(s, date.strings))
states.dates <- lapply(state.abb, function(s) cbind(s, date.strings))
states.dates <- data.frame(do.call(rbind, states.dates),                            stringsAsFactors = FALSE)
all.sightings <- merge(states.dates,                        sightings.counts,                        by.x = c("s", "date.strings"),                        by.y = c("USState", "YearMonth"),                        all = TRUE)
names(all.sightings) <- c("State", "YearMonth", "Sightings")
# Covert the NAs to 0's, what we really wanted all.sightings$Sightings[is.na(all.sightings$Sightings)] <- 0 # Reset the character Year-Month to a Date objects all.sightings$YearMonth <- as.Date(rep(date.range, length(state.abb))) # Capitalize the State abbreviation and set as factor all.sightings$State <- as.factor(all.sightings$State)
ggplot(all.sightings, aes(x = YearMonth,y = Sightings)) +   geom_line(aes(color = "darkblue")) +   facet_wrap(~State, nrow = 10, ncol = 5) +    theme_bw() +    scale_color_manual(values = c("darkblue" = "darkblue"), guide = "none") +   scale_x_date(breaks = "5 years", labels = date_format('%Y')) +   xlab("Years") +   ylab("Number of Sightings") +   ggtitle("Number of UFO sightings by Month-Year and U.S. State (1990-2010)")
ggplot(all.sightings, aes(x = YearMonth, y = Sightings)) +   geom_line(aes(color = "darkblue")) +   facet_wrap(~State, nrow = 10, ncol = 5) +   theme_bw() +   scale_color_manual(values = c("darkblue" = "darkblue"), guide = "none") +   #scale_x_date(breaks = "5 years", labels = date_format('%Y')) +   scale_x_date(breaks = date_breaks("5 years"), labels = date_format('%Y')   xlab("Years") +   ylab("Number of Sightings") +   ggtitle("Number of UFO sightings by Month-Year and U.S. State (1990-2010)") )
ggplot(all.sightings, aes(x = YearMonth, y = Sightings)) +   geom_line(aes(color = "darkblue")) +   facet_wrap(~State, nrow = 10, ncol = 5) +   theme_bw() +   scale_color_manual(values = c("darkblue" = "darkblue"), guide = "none") +   #scale_x_date(breaks = "5 years", labels = date_format('%Y')) +   scale_x_date(breaks = date_breaks("5 years"), labels = date_format('%Y'))   xlab("Years") +   ylab("Number of Sightings") +   ggtitle("Number of UFO sightings by Month-Year and U.S. State (1990-2010)")
state.plot <- ggplot(all.sightings, aes(x = YearMonth, y = Sightings)) +   geom_line(aes(color = "darkblue")) +   facet_wrap(~State, nrow = 10, ncol = 5) +   theme_bw() +   scale_color_manual(values = c("darkblue" = "darkblue"), guide = "none") +   #scale_x_date(breaks = "5 years", labels = date_format('%Y')) +   scale_x_date(breaks = date_breaks("5 years"), labels = date_format('%Y'))   xlab("Years") +   ylab("Number of Sightings") +   ggtitle("Number of UFO sightings by Month-Year and U.S. State (1990-2010)") # Save the plot as a PDF ggsave(plot = state.plot,        filename = file.path("images", "ufo_sightings.pdf"),        width = 14,        height = 8.5)
state.plot <- ggplot(all.sightings, aes(x = YearMonth, y = Sightings)) +   geom_line(aes(color = "darkblue")) +   facet_wrap(~State, nrow = 10, ncol = 5) +   theme_bw() +   scale_color_manual(values = c("darkblue" = "darkblue"), guide = "none") +   #scale_x_date(breaks = "5 years", labels = date_format('%Y')) +   scale_x_date(breaks = date_breaks("5 years"), labels = date_format('%Y'))   xlab("Years") +   ylab("Number of Sightings") +   ggtitle("Number of UFO sightings by Month-Year and U.S. State (1990-2010)")
ggplot(all.sightings, aes(x = YearMonth, y = Sightings)) +   geom_line(aes(color = "darkblue")) +   facet_wrap(~State, nrow = 10, ncol = 5) +   theme_bw() +   scale_color_manual(values = c("darkblue" = "darkblue"), guide = "none") +   #scale_x_date(breaks = "5 years", labels = date_format('%Y')) +   scale_x_date(breaks = date_breaks("5 years"), labels = date_format('%Y')) +   xlab("Years") +   ylab("Number of Sightings") +   ggtitle("Number of UFO sightings by Month-Year and U.S. State (1990-2010)")
state.plot <- ggplot(all.sightings, aes(x = YearMonth, y = Sightings)) +   geom_line(aes(color = "darkblue")) +   facet_wrap(~State, nrow = 10, ncol = 5) +   theme_bw() +   scale_color_manual(values = c("darkblue" = "darkblue"), guide = "none") +   #scale_x_date(breaks = "5 years", labels = date_format('%Y')) +   scale_x_date(breaks = date_breaks("5 years"), labels = date_format('%Y')) +   xlab("Years") +   ylab("Number of Sightings") +   ggtitle("Number of UFO sightings by Month-Year and U.S. State (1990-2010)")
ggsave(plot = state.plot,        filename = file.path("images", "ufo_sightings.pdf"),        width = 14,        height = 8.5)
state.pop <- read.csv(file.path('data/census.csv'), stringsAsFactors=FALSE)
library(rmarkdown)
install.packages("rmarkdown")
